package expresscogs.utility;

import org.jblas.DoubleMatrix;
import org.jblas.MatrixFunctions;

import expresscogs.network.NeuronGroup;

/**
 * NeuralFieldSensor sorts the action potentials generated by a neuron group into bins spaced
 * uniformly along the X coordinate of the group. The sensor records a sliding window of spikes
 * in each bin, resulting in a moving average neural field.
 */
public class NeuralFieldSensor {
    private NeuronGroup neurons;
    private DoubleMatrix position;
    private DoubleMatrix spikes;
    private DoubleMatrix field;
    private double frequency = 1000;
    private int window = 1000;
    private int bins = 100;
    private double binWidth = (1.0 / bins);
    private int step;
    
    /** Construct a NeuralFieldSensor which will record from the given NeuronGroup. */
    public NeuralFieldSensor(NeuronGroup neurons) {
        this.neurons = neurons;
        setupField();
    }
    
    private void setupField() {
        position = DoubleMatrix.linspace(1, bins, bins).divi(bins).subi(binWidth / 2);
        spikes = DoubleMatrix.zeros(bins, window);
        field = DoubleMatrix.zeros(bins);
    }
    
    public int getWindowSize() {
        return window;
    }
    
    public void setWindowSize(int value) {
        window = value;
        setupField();
    }
    
    public int getNumberOfBins() {
        return bins;
    }
    
    public void setNumberOfBins(int value) {
        bins = value;
        binWidth = (1.0 / bins);
        setupField();
    }
    
    /** Get the X position of each bin in the neural field. */
    public DoubleMatrix getPosition() {
        return position;
    }
    
    /** Get the current activity values for the neural field. */
    public DoubleMatrix getActivity() {
        return field;
    }
    
    /** Update the sensor by reading the current spikes from the neuron group and sorting them into bins. */
    public void update(double t) {
        spikes.putColumn(step % window, spikes.getColumn(step % window).fill(0));
        DoubleMatrix indices = MatrixFunctions.floori(neurons.getXPosition().add(binWidth / 2).mul(bins - 1));
        for (int n : neurons.getSpikes().findIndices()) {
            spikes.put((int)indices.get(n), step % window, spikes.get(step % window) + 1);
        }
        field = spikes.rowSums().mul(frequency / window);
        ++step;
    }
}
